package br.com.fast.aws.connection.dynamodb.teste.entity;

import java.util.Date;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

/**
 * The Class GestaoIdentificadorTesteEntity.
 *
 * @author Guilherme Iobbi
 * @author Andre_Ripari
 */
@DynamoDBTable(tableName = "REPLACED")
public class GestaoIdentificadorTesteEntity {

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    private String id;

    // Data que sempre será usada para ordenação nas buscas e pela qual saberemos qual o registro válido(o mais atual)
    // Está sendo usado como RangeKey dos index
    @DynamoDBIndexRangeKey(globalSecondaryIndexNames = { "_GINuIdentificadorIndex", "_GICodIdentificadorIndex", "_GIPlacaIndex" })
    private Date dataInclusao;

    // Index com chave composta de ID cliente e conta
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "_GIClienteContaIndex")
    private Integer idCliente;

    @DynamoDBIndexRangeKey(globalSecondaryIndexName = "_GIClienteContaIndex")
    private Integer idConta;

    // Index com hash key de nuIdentificador
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "_GINuIdentificadorIndex")
    private Long nuIdentificador;

    // Index com hash key de codIdentificador
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "_GICodIdentificadorIndex")
    private String codIdentificador;

    // Index com hash key de placa
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "_GIPlacaIndex")
    private String placa;

    @DynamoDBAttribute
    private String json;

    /**
     * Instantiates a new gestao identificador entity.
     */
    public GestaoIdentificadorTesteEntity() {
    }

    /**
     * Método construtor.
     *
     * @param dto
     *            the dto
     */

    /**
     * Gets the id.
     *
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the id.
     *
     * @param id
     *            the new id
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the id cliente.
     *
     * @return the id cliente
     */
    public Integer getIdCliente() {
        return idCliente;
    }

    /**
     * Sets the id cliente.
     *
     * @param idCliente
     *            the new id cliente
     */
    public void setIdCliente(Integer idCliente) {
        this.idCliente = idCliente;
    }

    /**
     * Gets the id conta.
     *
     * @return the id conta
     */
    public Integer getIdConta() {
        return idConta;
    }

    /**
     * Sets the id conta.
     *
     * @param idConta
     *            the new id conta
     */
    public void setIdConta(Integer idConta) {
        this.idConta = idConta;
    }

    /**
     * Gets the nu identificador.
     *
     * @return the nu identificador
     */
    public Long getNuIdentificador() {
        return nuIdentificador;
    }

    /**
     * Sets the nu identificador.
     *
     * @param nuIdentificador
     *            the new nu identificador
     */
    public void setNuIdentificador(Long nuIdentificador) {
        this.nuIdentificador = nuIdentificador;
    }

    /**
     * Gets the cod identificador.
     *
     * @return the cod identificador
     */
    public String getCodIdentificador() {
        return codIdentificador;
    }

    /**
     * Sets the cod identificador.
     *
     * @param codIdentificador
     *            the new cod identificador
     */
    public void setCodIdentificador(String codIdentificador) {
        this.codIdentificador = codIdentificador;
    }

    /**
     * Gets the data inclusao.
     *
     * @return the data inclusao
     */
    public Date getDataInclusao() {
        return dataInclusao;
    }

    /**
     * Sets the data inclusao.
     *
     * @param dataInclusao
     *            the new data inclusao
     */
    public void setDataInclusao(Date dataInclusao) {
        this.dataInclusao = dataInclusao;
    }

    public String getPlaca() {
        return placa;
    }

    public void setPlaca(String placa) {
        this.placa = placa;
    }

    /**
     * Gets the json.
     *
     * @return the json
     */
    public String getJson() {
        return json;
    }

    /**
     * Sets the json.
     *
     * @param json
     *            the new json
     */
    public void setJson(String json) {
        this.json = json;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((codIdentificador == null) ? 0 : codIdentificador.hashCode());
        result = prime * result + ((dataInclusao == null) ? 0 : dataInclusao.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((idCliente == null) ? 0 : idCliente.hashCode());
        result = prime * result + ((idConta == null) ? 0 : idConta.hashCode());
        result = prime * result + ((json == null) ? 0 : json.hashCode());
        result = prime * result + ((nuIdentificador == null) ? 0 : nuIdentificador.hashCode());
        result = prime * result + ((placa == null) ? 0 : placa.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        GestaoIdentificadorTesteEntity other = (GestaoIdentificadorTesteEntity) obj;
        if (codIdentificador == null) {
            if (other.codIdentificador != null)
                return false;
        } else if (!codIdentificador.equals(other.codIdentificador))
            return false;
        if (dataInclusao == null) {
            if (other.dataInclusao != null)
                return false;
        } else if (!dataInclusao.equals(other.dataInclusao))
            return false;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (idCliente == null) {
            if (other.idCliente != null)
                return false;
        } else if (!idCliente.equals(other.idCliente))
            return false;
        if (idConta == null) {
            if (other.idConta != null)
                return false;
        } else if (!idConta.equals(other.idConta))
            return false;
        if (json == null) {
            if (other.json != null)
                return false;
        } else if (!json.equals(other.json))
            return false;
        if (nuIdentificador == null) {
            if (other.nuIdentificador != null)
                return false;
        } else if (!nuIdentificador.equals(other.nuIdentificador))
            return false;
        if (placa == null) {
            if (other.placa != null)
                return false;
        } else if (!placa.equals(other.placa))
            return false;
        return true;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("GestaoIdentificadorTesteEntity [id=");
        builder.append(id);
        builder.append(", dataInclusao=");
        builder.append(dataInclusao);
        builder.append(", idCliente=");
        builder.append(idCliente);
        builder.append(", idConta=");
        builder.append(idConta);
        builder.append(", nuIdentificador=");
        builder.append(nuIdentificador);
        builder.append(", codIdentificador=");
        builder.append(codIdentificador);
        builder.append(", placa=");
        builder.append(placa);
        builder.append(", json=");
        builder.append(json);
        builder.append("]");
        return builder.toString();
    }

}
